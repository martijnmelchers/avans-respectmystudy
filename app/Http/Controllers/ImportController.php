<?php

namespace App\Http\Controllers;

use App\ContactGroup;
use App\ContactPerson;
use App\Location;
use App\Minor;
use App\Organisation;

class ImportController extends Controller
{
    public function Minors()
    {
        // KiesOpMaat API format: https://hastebin.com/egiyatugam.xml

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        if (isset($_GET['page']) && $_GET['page'] > 0) {
            $page = "?page=" . $_GET['page'];
        } else {
            $page = "";
        }

        curl_setopt($ch, CURLOPT_URL, "https://www.kiesopmaat.nl/api/public/module/$page");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = [];
        $kiesopmaat_token = env('KIESOPMAAT_TOKEN');
        $headers[] = "Authorization: Token $kiesopmaat_token";

        // Add headers to request
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        $php_result = json_decode($result);

        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        if (isset($php_result->detail)) {
            echo $result;
            die();
        }

        $errors = $messages = [];

        // Loop through all minors
        foreach ($php_result->results as $r) {
            // Select the minor
            $minor = Minor::orderBy('version', 'desc')->where('id', $r->id)->first();

            $messages[] = "Minor " . $r->id . " already exists";

            // Check if minor is set, if already in database
            if (isset($minor)) {
                // Check if minor has changed
                if (!$minor->isSame($r)) {

                    // Calculate new version
                    $newVersion = $minor->version + 1;

                    $messages[] = "Minor " . $r->id . " is veranderd, dus versie $newVersion is aangemaakt";

                    // Check if the contact group exists, and get the id if it does
                    $contact_group_id = null;
                    if ($r->contact != null) {
                        $contact_group = ContactGroup::where("id", $r->contact)->first();
                        if ($contact_group_id != null) $contact_group_id = $contact_group->id;
                        else $messages[] = "Contactgroup $r->contact niet gevonden";
                    }

                    // Create new minor
                    $minor = new Minor([
                        "id" => $r->id,
                        "version" => $newVersion,
                        "name" => $r->name,
                        "phonenumber" => "",
                        "email" => "",
                        "kiesopmaat" => $r->id,
                        "ects" => $r->ects,
                        "costs" => $r->costs,
                        "subject" => $r->subject,
                        "goals" => $r->goals,
                        "requirements" => $r->requirements,
                        "examination" => $r->examination,
                        "level" => $r->level,
                        "language" => $r->language,
                        "is_published" => false,
                        "is_enrollable" => false,
                        "organisation_id" => $r->ownedby_organisation,
                        "contact_group_id" => $contact_group_id
                    ]);
                    $minor->save();
                } else {
                    $messages[] = "Minor $r->id is hetzelfde gebleven, dus er is geen nieuwe versie aangemaakt";
                }

                // Delete all locations associated with the minor (to prevent doubles in linking table)
                $minor->locations()->detach();

                // Insert locations of minor
                foreach ($r->locations as $l) {
                    $minor = Minor::where('id', $r->id)->first();

                    $location = Location::find($l);
                    $minor->locations()->attach($location);
                }
            } else {
                // Minor has not been added

                // Get the organisation
                $organisation = Organisation::where("id", $r->ownedby_organisation)->first();

                // Check if organisation exists
                if ($organisation != null) {
                    // Check if the contact group exists, and get the id if it does
                    $contact_group_id = null;
                    if ($r->contact != null) {
                        $contact_group = ContactGroup::where("id", $r->contact)->first();
                        if ($contact_group_id != null)
                            $contact_group_id = $contact_group->id;
                        else
                            $messages[] = "Contactgroep $r->contact niet gevonden";
                    }

                    $minor = new Minor([
                        "id" => $r->id,
                        "version" => 1,
                        "name" => $r->name,
                        "phonenumber" => "",
                        "email" => "",
                        "kiesopmaat" => $r->id,
                        "ects" => $r->ects,
                        "costs" => $r->costs,
                        "subject" => $r->subject,
                        "goals" => $r->goals,
                        "requirements" => $r->requirements,
                        "examination" => $r->examination,
                        "level" => $r->level,
                        "language" => $r->language,
                        "is_published" => false,
                        "is_enrollable" => false,
                        "organisation_id" => $r->ownedby_organisation,
                        "contact_group_id" => $contact_group_id
                    ]);
                    $minor->save();

                    // Insert locations of created minor
                    foreach ($r->locations as $l) {
                        $location = Location::find($l);
                        $minor = Minor::all()->where("id", $r->id)->first();

                        $minor->locations()->attach($location);
                    }
                } else {
                    $errors[] = "Organisatie " . $r->ownedby_organisation . " niet gevonden";
                }
            }

            if (isset($r->contact)) {
                $contact_group = ContactGroup::where("id", $r->contact)->first();

                if (isset($contact_group)) {
                    $minor = Minor::where("id", $r->id)->first();
                    $minor->contact_group_id = $r->contact;
                    $minor->save();
                    $messages[] = "Contactgroep $r->id toegevoegd!";
                } else {
                    $errors[] = "Contactgroep $r->id niet gevonden!";
                }
            }
        }

        curl_close($ch);

        $php_result->errors = $errors;
        $php_result->messages = $messages;

        return response(json_encode($php_result, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE), 200)
            ->header('Content-Type', 'text/json');
    }

    public function Organisations()
    {
        // KiesOpMaat API format: https://hastebin.com/ubazezudiq.json

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        if (isset($_GET['page']) && $_GET['page'] > 0) {
            $page = "?page=" . $_GET['page'];
        } else {
            $page = "";
        }

        curl_setopt($ch, CURLOPT_URL, "https://www.kiesopmaat.nl/api/public/organisation/$page");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = [];

        $kiesopmaat_token = env('KIESOPMAAT_TOKEN');
        $headers[] = "Authorization: Token $kiesopmaat_token";

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        $php_result = json_decode($result);

        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        // Get KIESOPMAAT error
        if (isset($php_result->detail)) {
            echo $result;
            die();
        }

        foreach ($php_result->results as $r) {
            $organization = Organisation::all()->where('id', $r->id)->first();
            if (isset($organization)) {
                // Organisatie staat al in de database
            } else {
                $organization = new Organisation([
                    "id" => $r->id,
                    "name" => $r->name,
                    "abbreviation" => $r->abbreviation,
                    "type" => $r->type,
                    "participates" => $r->participates,
                ]);
                $organization->save();
            }
        }

        curl_close($ch);
        return response($result, 200)
            ->header('Content-Type', 'text/json');
    }

    public function Locations()
    {
        // KiesOpMaat API format: https://hastebin.com/egiyatugam.xml

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        if (isset($_GET['s']) && $_GET['s'] > 0) {
            $i = $_GET['s'] . "/";
        } else {
            $i = "";
        }

        if (isset($_GET['page']) && $_GET['page'] > 0) {
            $page = "?page=" . $_GET['page'];
        } else {
            $page = "";
        }

        curl_setopt($ch, CURLOPT_URL, "https://www.kiesopmaat.nl/api/public/location/$i$page");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = [];

        $kiesopmaat_token = env('KIESOPMAAT_TOKEN');
        $headers[] = "Authorization: Token $kiesopmaat_token";

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        $php_result = json_decode($result);

        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        if (isset($php_result->detail)) {
            header("Content-type: text/json");
            echo $result;
            die();
        }

        $messages = array();

        foreach ($php_result->results as $r) {
            $location = Location::all()->where('id', $r->id)->first();
            if (isset($location)) {
                // Location is already in database
                $curl = curl_init();

                $address = urlencode($r->visitingaddress);
                $postalcode = str_replace(" ", "", $r->visitingzip);
                $key = env("GOOGLEMAPS_API_KEY", null);

                // Get location from Google Maps API if key is set in .env and there isn't already a lat
                if (isset($key)) {
                    // Google maps API voor alle locaties
                    curl_setopt($ch, CURLOPT_URL, "https://maps.googleapis.com/maps/api/geocode/json?address=$address%20$postalcode&key=$key");
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

                    $google_result = curl_exec($ch);
                    $google_php_result = json_decode($google_result);

                    if (sizeof($google_php_result->results) > 0) {
                        foreach ($google_php_result->results as $r) {
                            $lat = floatval($r->geometry->location->lat);
                            $lon = floatval($r->geometry->location->lng);

                            $location->lat = $lat;
                            $location->lon = $lon;
                            $location->save();
                        }
                    } else if (isset($google_php_result->error_message)) {
                        $messages[] = $google_php_result->error_message;
                    }
                }
            } else {
                // Location is not in database

                // Check if organisation has been imported
                if (Organisation::where('id', $r->ownedby_organisation)->get()->count() == 0)
                    break;

                // Create a new location
                $location = new Location([
                    "id" => $r->id,
                    "name" => $r->name,
                    "primarylocation" => $r->primarylocation,
                    "mailaddress" => $r->mailaddress,
                    "mailcity" => $r->mailcity,
                    "mailzip" => $r->mailzip,
                    "establishment" => 0,
                    "visitingaddress" => $r->visitingaddress,
                    "visitingzip" => $r->visitingzip,
                    "visitingcity" => $r->visitingcity,
                    "organisation_id" => $r->ownedby_organisation,
                ]);
                $location->save();

                // Google Maps latlong interpretor
                $curl = curl_init();

                $postalcode = str_replace(" ", "", $r->visitingzip);
                $key = env("GOOGLEMAPS_API_KEY", null);

                // Get location from Google Maps API if key is set in .env and there isn't already a lat
                if (isset($key) && !isset($location->lat)) {
                    // Google maps API voor alle locaties
                    curl_setopt($ch, CURLOPT_URL, "https://maps.googleapis.com/maps/api/geocode/json?address=$postalcode&key=$key");
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

                    $google_result = curl_exec($ch);
                    $google_php_result = json_decode($google_result);

                    if (sizeof($google_php_result->results) > 0) {
                        foreach ($google_php_result->results as $r) {
                            $lat = floatval($r->geometry->location->lat);
                            $lon = floatval($r->geometry->location->lng);

                            $location->lat = $lat;
                            $location->lon = $lon;
                            $location->save();
                        }
                    }
                }
            }
        }

        curl_close($ch);

        $php_result->messages = $messages;

        return response()->json($php_result, 200, [], JSON_UNESCAPED_SLASHES)
            ->header('Content-Type', 'text/json');
    }

    public function ContactPersons()
    {
        // KiesOpMaat API format: https://hastebin.com/ubazezudiq.json

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        if (isset($_GET['page']) && $_GET['page'] > 0) {
            $page = "?page=" . $_GET['page'];
        } else {
            $page = "";
        }

        $messages = array();

        curl_setopt($ch, CURLOPT_URL, "https://www.kiesopmaat.nl/api/public/person/$page");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = [];

        $kiesopmaat_token = env('KIESOPMAAT_TOKEN');
        $headers[] = "Authorization: Token $kiesopmaat_token";

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        $php_result = json_decode($result);

        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        // Get KIESOPMAAT error
        if (isset($php_result->detail)) {
            echo $result;
            die();
        }

        foreach ($php_result->results as $r) {
            $contactperson = ContactPerson::where("id", $r->id)->first();

            if (isset($contactperson)) {
                $messages[] = $r->firstname . " " . $r->middlename . " " . $r->lastname . " ($r->id) staat al in de database";
            } else {
                $organisation = Organisation::where("id", $r->ownedby_organisation)->first();

                // Check if the organisation exists
                if (!isset($organisation)) {
                    $messages[] = $r->firstname . " " . $r->middlename . " " . $r->lastname . " kon niet worden toegevoegd omdat de organisatie $r->ownedby_organisation niet bestaat";
                } else {
                    // Add the contact person
                    $contactperson = new ContactPerson([
                        "id" => $r->id,
                        "firstname" => $r->firstname,
                        "middlename" => $r->middlename,
                        "lastname" => $r->lastname,
                        "email" => $r->email,
                        "organisation_id" => $r->ownedby_organisation
                    ]);

                    if (!$contactperson->save())
                        $messages[] = $r->firstname . " " . $r->middlename . " " . $r->lastname . " kon niet worden toegevoegd";
                }
            }
        }

        $php_result->messages = $messages;
        curl_close($ch);
        return response()->json($php_result)
            ->header('Content-Type', 'text/json');
    }

    public function ContactGroups()
    {
        $ch = curl_init();

        if (isset($_GET['page']) && $_GET['page'] > 0) {
            $page = "?page=" . $_GET['page'];
        } else {
            $page = "";
        }

        $messages = array();

        curl_setopt($ch, CURLOPT_URL, "https://www.kiesopmaat.nl/api/public/contact/$page");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = [];

        $kiesopmaat_token = env('KIESOPMAAT_TOKEN');
        $headers[] = "Authorization: Token $kiesopmaat_token";

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        $php_result = json_decode($result);

        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }

        // Get KIESOPMAAT error
        if (isset($php_result->detail)) {
            echo $result;
            die();
        }

        foreach ($php_result->results as $r) {
            $contactgroup = ContactGroup::where("id", $r->id)->first();

            if (isset($contactgroup)) {
                $contactgroup->update([
                    'name' => $r->name,
                    'description' => $r->description,
                    'email' => $r->email,
                    'postaladdress' => $r->postaladdress,
                    'telephone' => $r->telephone
                ]);

                if (!$contactgroup->save())
                    $messages[] = "Er ging iets mis bij het updaten van $r->name";
            } else {
                $organisation = Organisation::where("id", $r->ownedby_organisation)->first();

                // Check if the organisation exists
                if (!isset($organisation)) {
                    $messages[] = "$r->name ($r->id) kan niet worden toegevoegd omdat de organisatie ($r->ownedby_organisation) niet bestaat";
                } else {
                    $contactgroup = new ContactGroup([
                        'id' => $r->id,
                        'organisation_id' => $r->ownedby_organisation,
                        'name' => $r->name,
                        'description' => $r->description,
                        'email' => $r->email,
                        'postaladdress' => $r->postaladdress,
                        'telephone' => $r->telephone
                    ]);

                    if (!$contactgroup->save())
                        $messages[] = "Er ging iets mis bij het toevoegen van $r->name";
                }
            }
        }

        $php_result->messages = $messages;
        curl_close($ch);
        return response()->json($php_result)
            ->header('Content-Type', 'text/json');
    }
}
